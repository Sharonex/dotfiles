./teka lab provision -f --size 2 --clusterize-hosts-num 6 --type i3.2xlarge --os aws1803 sharonsc
weka stats --show-internal --stat=SERVER_PROCESSING_TIME --interval=60  --param method:'*' --node-ids=1
weka local run aws-create-cluster -n sha1 -t Name=sha1
pdsh -f 64 -R ssh -w "$SYS-clients-1-[20-269].wekalab.io $SYS-clients-2-[270-519].wekalab.io" "curl http://$SYS-\`expr \$RANDOM % 20\`:14000/dist/v1/install | sh && mkdir -p /mnt/demo && mount -t wekafs $SYS-\`expr \$RANDOM % 20\`/default /mnt/demo && echo DONE > /mnt/demo/prep-\`hostname\`"
echo drain > /proc/wekafs/interface
weka local run -- hd /data/reserved_space/current/config/raft/leadershipAgent/snapshot.0 | less
sudo mount -t xfs opt/weka/data/logs.loop opt/weka/logs/
./teka releases create-schedule -b 3.11.3-bv2Logs --base-version 3.11.3 --type beta --trunk qa 
./teka cleanup -cf && ./teka bs -a -e ./waf clean
./teka aws detach
weka local run wapi config-override-key --key clusterInfo.clientsBranchingFactor --value 1
watch -n 0.2 'weka cluster nodes > c && echo "UP: `cat c | grep UP | wc -l`" && echo "DOWN: `cat c | grep DOWN | wc -l`" && echo "JOINING: `cat c | grep JOINING | wc -l`" && echo "SYNCING: `cat c | grep SYNCING | wc -l`" && echo "FENCING: `cat c | grep FENCING | wc -l`"'
./pytest qa/tests  -vsx  -S sha1 -k test_wekanode_ut  --skip-finalize --disable-diags --freeze=never
echo 1 > /proc/sys/kernel/sysrq; echo b > /proc/sysrq-trigger
OLD=`weka version current`; NEW=$WV; weka version get $NEW && weka local stop && cp -rf /opt/weka/data/default_{$OLD,$NEW} && weka version set $NEW && weka local start
./teka lab list -v | grep wtrex | grep -v stateless | awk '{print $5 " " $23}'
weka stats --show-internal --stat=LEADER_HEARTBEAT_PROCESSING_TIME,HEARTBEAT_PROCESSING_TIME --start-time=-1m
./teka bs -a -e -> ./waf explore -> ./_waf build --misc --unittest -j16 --targets=rpc_ut && /build/weka/rpc/rpc_ut weka.rpc.tests.test_upgrade
./teka bs -a -e -> ./waf explore -> ./_waf build --misc --unittest -j16 --targets=wekanode_ut && /build/weka/wekanode_ut weka.config.effective_capacity
./teka bs -a -e -> ./waf explore -> ./weld.py -j16 --targets=wekanode_ut && /build/weka/wekanode_ut weka.config.effective_capacity
OLD=`weka version current --container $CONT`; weka version get $WV && weka local stop $CONT && mv /opt/weka/data/${CONT}_{$WV,$WV_$RANDOM}; cp -rf /opt/weka/data/${CONT}_{$OLD,$WV} && cp -rf /opt/weka/data/${CONT}_{$OLD,$WV} && weka version set --container $CONT $WV && weka local start $CONT
weka version get $WV && weka local run -C drives0 --in $WV upgrade --mode=ndu
fio --rw=write --blocksize=4k --size=500GB --numjobs=1 --directory=/mnt/demo --name=weka3.14.2.9
and assignee =5ec131e3a1925f0c1925713c and status = "To Do"
./teka build --build-opts="-v --disable-asserts --release --boundscheck=off -j32"
mkdir -p /mnt/demo && mount -t wekafs -o num_cores=0 -o net=udp sha1-0/default /mnt/demo
weka version get $WV && for i in drives0 compute0 frontend0; do weka local upgrade -C $i --target-version $WV --skip-all-stages; done
weka version get $WV && weka local upgrade --all --target-version $WV --skip-all-stages
./teka upgrade --mode=local
seq 0 79 | xargs -P20 -IHOST ssh T-stark-HOST -- weka local enable
./teka releases create-schedule -b 4.2.3-squarepoint --base-version 4.2.3 --trunk verbose-agent --build-opts="--release --disable-asserts" --release-recovery=yes -t ga --reason "Adds logs to agent around starting containers(But not too many logs)"


aws s3 sync --delete  s3://pelanor-test-customer-data-archive/customer1/ ~/work/customers/customer1
cargo run --release --bin analytics ~/work/customers --local --no-progress --max-artifact-age 3
